# main dependencies
express = require 'express'
actions = require './actions'
global = require './global'

# helper functions and middleware
needs = require './core/needs'
msg = require './core/msg'
locals = require './core/locals'

app = express()

# express middleware
app.set 'view engine', 'jade'
app.use express.logger 'dev'
app.use express.limit '10mb'
app.use express.bodyParser {keepExtensions: true, uploadDir: __dirname + '/public/uploads'}
app.use express.cookieParser 'node content manager'
app.use express.cookieSession()
app.use express.static __dirname + '/public'

# own middleware
app.use msg.info
app.use msg.error
app.use locals app

# app logic

# middleware shortcuts
isUser = actions.auth.loggedIn 1
isAdmin = actions.auth.loggedIn 2
isHigherAdmin = actions.auth.loggedIn 3
notLoggedIn = actions.auth.notLoggedIn

app.get '/', actions.home.show

app.get '/admin', isUser, actions.admin.show

# content management
app.get '/pages', isUser, actions.pages.showAll
app.get '/page/create', isUser, actions.pages.createForm
app.post '/page/create', isUser, needs(['title', 'content']), actions.pages.create
app.get '/page/edit/:id', isUser, actions.pages.editForm
app.post '/page/edit/:id', isUser, needs('content'), actions.pages.edit
app.get '/page/remove/:id', isUser, actions.pages.remove
app.get '/page/:title', actions.pages.show

# auth
app.get '/login', notLoggedIn, actions.auth.loginForm
app.post '/login', notLoggedIn, needs(['username', 'password']), actions.auth.login
app.get '/logout', isUser, actions.auth.logout

# user management
app.all '/users/*', isAdmin
app.get '/users', actions.users.showAll
app.get '/user/create', actions.users.createForm
app.post '/user/create', needs(['username', 'password', 'lvl']), actions.users.create
app.post '/user/edit/:id', needs(['password', 'lvl']), actions.users.edit
app.get '/user/remove/:id', actions.users.remove
app.get '/user/:id', actions.users.show

# navigation management
app.all '/links', isUser
app.get '/links', actions.links.showAll
app.post '/links', needs(['titles', 'targets', 'newTitle', 'newTarget']), actions.links.edit

# header data (meta tag) management
app.all '/headers', isAdmin
app.get '/headers', actions.headers.showAll
app.post '/headers', needs(['title', 'description', 'keywords']), actions.headers.edit

# upload
app.all '/upload/', isUser
app.get '/upload', actions.upload.showForm
app.post '/upload', actions.upload.validate

# db saving
app.get '/save', isHigherAdmin, actions.save.write

# 404 not found
app.all '*', actions.e404.show

# all yours
port = 8080
app.listen port
console.log 'Listening on port ' + port